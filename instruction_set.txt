// ALU-op                  0 ooooo aaaa l i rrrr
//     Arithmetic          0 0scdf aaaa l i rrrr
//     Logic               0 1oooo aaaa l i rrrr
// 
// Relative jumps          10 cccc dddddddddd
// 
// Misc                    11 oooo ??????????
// 
//     jmp/here/call/ret   11 0000 aaaa l i rrrr    
//                         11 0001 aaaa l i rrrr    
//     lbz                 11 0010 aaaa l i rrrr    
//     lbs                 11 0011 aaaa l i rrrr    
//     sw                  11 0100 aaaa l i rrrr    
//                         11 0101 aaaa l i rrrr    
//     sb                  11 0110 aaaa l i rrrr    
//                         11 0111 aaaa l i rrrr    
//     push                11 1000 aaaa l i rrrr    
//     pop                 11 1001 aaaa l i rrrr    
//     xchg                11 1010 aaaa l i rrrr    
//                         11 1011 aaaa l i rrrr    
//     lsl/lsr             11 1100 aaaa d t xxxx
//     asl/asr             11 1101 aaaa d t xxxx
//                         11 1110 
//                         11 1111 

en z-flagga för extended arithmetic

en division by zero-flagga

instruktioner för flaggor? eller flaggor åtkomliga på annat sätt?

q-instruktioner

loopinstruktioner

bitinstruktioner? test and set?

multiplikation och division?

nån sorts systemanrop



// Arithmetic       0 0scdf aaaa l i rrrr
      scdf  operation       b    assembly
      0000  [ cf add    ]  #0    acf %r
      0000  [ cf add    ]   y    adc %r, y
      0001  [ cf sub    ]  #0    sbf %r
      0001  [ cf sub    ]   y    sbb %r, y
      0010  [ cf add dis]  #0    acfd %r
      0010  [ cf add dis]   y    adcd %r, y
      0011  [ cf sub dis]  #0    cmpbf %r
      0011  [ cf sub dis]   y    sbcd %r, y
      0100  [~cf add    ]  #0    abf  %r
      0100  [~cf add    ]   y    adb  %r, y
      0101  [~cf sub    ]  #0    scf  %r
      0101  [~cf sub    ]   y    sbc  %r, y
      0110  [~cf add dis]  #0    abfd %r
      0110  [~cf add dis]   y    adbd %r, y
      0111  [~cf sub dis]  #0    cmpcf %r
      0111  [~cf sub dis]   y    sbcd %r, y
      1000  [ c0 add    ]  #0    add0 %r
      1000  [ c0 add    ]   y    add %r, y
      1001  [ c0 sub    ]  #0    dec %r
      1001  [ c0 sub    ]   y    subdec %r, y
      1010  [ c0 add dis]  #0    clctst %r
      1010  [ c0 add dis]   y    addd %r, y
      1011  [ c0 sub dis]  #0    cmpp1 %r
      1011  [ c0 sub dis]   y    subdecd %r, y
      1100  [ c1 add    ]  #0    inc %r
      1100  [ c1 add    ]   y    addinc %r, y
      1101  [ c1 sub    ]  #0    stctst %r
      1101  [ c1 sub    ]   y    sub %r, y
      1110  [ c1 add dis]  #0    cmpm1 %r
      1110  [ c1 add dis]   y    addincd %r, y
      1111  [ c1 sub dis]  #0    cmp0 %r
      1111  [ c1 sub dis]   y    cmp %r, y

// Logic            0 1oooo aaaa l i rrrr

      0000  ~a                   rnot
      0001  ~a | ~b              anand
      0010  ~a &  b              rmcl
      0011   0                   clr
      0100  ~(a & b)             nand
      0101       ~b              not
      0110   a ^  b              xor
      0111   a & ~b              mcl
      1000  ~a |  b              rmst
      1001  ~a ^ ~b              axor
      1010        b              mov
      1011   a &  b              and
      1100  ~0                   set
      1101   a | ~b              mst
      1110   a |  b              or
      1111   a                   tst

// Relative jumps   10 cccc dddddddddd

       0: CF                //  jlu/jc
       1: ZF                //  je/jz
       2: NF                //  jn/js
       3: VF                //  jv
       4: NF==VF            //  jges
       5: CF||ZF            //  jleu
       6: ZF||!(NF==VF)     //  jles
       7: 0                 //  doesn't jump
       8: !CF               //  jgeu/jnc
       9: !ZF               //  jne/jnz
      10: !NF               //  jp/jns
      11: !VF               //  jnv
      12: !(NF==VF)         //  jls
      13: !(CF||ZF)         //  jgu
      14: !(ZF||!(NF==VF))  //  jgs
      15: 1                 //  j

// Misc             11 oooo ??????????

    11 0000 aaaa l i rrrr    jmp/here/call/ret    a <- pc; pc <- y
                             jmp:  a=r0
                             here: a=y
                             ret:  y=ra
                             call: else
    11 0001 aaaa l i rrrr    
    11 0010 aaaa l i rrrr    lbz                  load byte zero-extended
    11 0011 aaaa l i rrrr    lbs                  load byte sign-extended

    11 0100 aaaa l i rrrr    sw                   store word  a -> y
    11 0101 aaaa l i rrrr    
    11 0110 aaaa l i rrrr    sb                   store byte  a -> y
    11 0111 aaaa l i rrrr    

    11 1000 aaaa l i rrrr    push                 (a--) <- y
    11 1001 aaaa l i rrrr    pop                  (++a) -> y
    11 1010 aaaa l i rrrr    xchg                 atomic exchange 
    11 1011 aaaa l i rrrr    

    11 1100 aaaa d t xxxx    logical shift, d selects left/right
                             t selects type R/K for "x" operand
                             lsl: d=0
                             lsr: d=1
    11 1101 aaaa d t xxxx    arithmetic shift
                             asl: d=0
                             asr: d=1

    11 1110 
    11 1111 
